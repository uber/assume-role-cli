// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/assume-role (interfaces: AWSProvider,AWSConfigProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	assumerole "github.com/uber/assume-role"
	reflect "reflect"
)

// MockAWSProvider is a mock of AWSProvider interface
type MockAWSProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAWSProviderMockRecorder
}

// MockAWSProviderMockRecorder is the mock recorder for MockAWSProvider
type MockAWSProviderMockRecorder struct {
	mock *MockAWSProvider
}

// NewMockAWSProvider creates a new mock instance
func NewMockAWSProvider(ctrl *gomock.Controller) *MockAWSProvider {
	mock := &MockAWSProvider{ctrl: ctrl}
	mock.recorder = &MockAWSProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWSProvider) EXPECT() *MockAWSProviderMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method
func (m *MockAWSProvider) AssumeRole(arg0, arg1 string) (*assumerole.TemporaryCredentials, error) {
	ret := m.ctrl.Call(m, "AssumeRole", arg0, arg1)
	ret0, _ := ret[0].(*assumerole.TemporaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole
func (mr *MockAWSProviderMockRecorder) AssumeRole(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAWSProvider)(nil).AssumeRole), arg0, arg1)
}

// AssumeRoleWithMFA mocks base method
func (m *MockAWSProvider) AssumeRoleWithMFA(arg0, arg1, arg2, arg3 string) (*assumerole.TemporaryCredentials, error) {
	ret := m.ctrl.Call(m, "AssumeRoleWithMFA", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*assumerole.TemporaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRoleWithMFA indicates an expected call of AssumeRoleWithMFA
func (mr *MockAWSProviderMockRecorder) AssumeRoleWithMFA(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRoleWithMFA", reflect.TypeOf((*MockAWSProvider)(nil).AssumeRoleWithMFA), arg0, arg1, arg2, arg3)
}

// CurrentPrincipalARN mocks base method
func (m *MockAWSProvider) CurrentPrincipalARN() (string, error) {
	ret := m.ctrl.Call(m, "CurrentPrincipalARN")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentPrincipalARN indicates an expected call of CurrentPrincipalARN
func (mr *MockAWSProviderMockRecorder) CurrentPrincipalARN() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPrincipalARN", reflect.TypeOf((*MockAWSProvider)(nil).CurrentPrincipalARN))
}

// MFADevices mocks base method
func (m *MockAWSProvider) MFADevices() ([]string, error) {
	ret := m.ctrl.Call(m, "MFADevices")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MFADevices indicates an expected call of MFADevices
func (mr *MockAWSProviderMockRecorder) MFADevices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MFADevices", reflect.TypeOf((*MockAWSProvider)(nil).MFADevices))
}

// Username mocks base method
func (m *MockAWSProvider) Username() (string, error) {
	ret := m.ctrl.Call(m, "Username")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Username indicates an expected call of Username
func (mr *MockAWSProviderMockRecorder) Username() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockAWSProvider)(nil).Username))
}

// MockAWSConfigProvider is a mock of AWSConfigProvider interface
type MockAWSConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAWSConfigProviderMockRecorder
}

// MockAWSConfigProviderMockRecorder is the mock recorder for MockAWSConfigProvider
type MockAWSConfigProviderMockRecorder struct {
	mock *MockAWSConfigProvider
}

// NewMockAWSConfigProvider creates a new mock instance
func NewMockAWSConfigProvider(ctrl *gomock.Controller) *MockAWSConfigProvider {
	mock := &MockAWSConfigProvider{ctrl: ctrl}
	mock.recorder = &MockAWSConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWSConfigProvider) EXPECT() *MockAWSConfigProviderMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method
func (m *MockAWSConfigProvider) GetCredentials(arg0 string) (*assumerole.TemporaryCredentials, error) {
	ret := m.ctrl.Call(m, "GetCredentials", arg0)
	ret0, _ := ret[0].(*assumerole.TemporaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials
func (mr *MockAWSConfigProviderMockRecorder) GetCredentials(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockAWSConfigProvider)(nil).GetCredentials), arg0)
}

// GetProfile mocks base method
func (m *MockAWSConfigProvider) GetProfile(arg0 string) (*assumerole.ProfileConfiguration, error) {
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*assumerole.ProfileConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockAWSConfigProviderMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockAWSConfigProvider)(nil).GetProfile), arg0)
}

// SetCredentials mocks base method
func (m *MockAWSConfigProvider) SetCredentials(arg0 string, arg1 *assumerole.TemporaryCredentials) error {
	ret := m.ctrl.Call(m, "SetCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCredentials indicates an expected call of SetCredentials
func (mr *MockAWSConfigProviderMockRecorder) SetCredentials(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCredentials", reflect.TypeOf((*MockAWSConfigProvider)(nil).SetCredentials), arg0, arg1)
}

// SetProfile mocks base method
func (m *MockAWSConfigProvider) SetProfile(arg0 string, arg1 *assumerole.ProfileConfiguration) error {
	ret := m.ctrl.Call(m, "SetProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProfile indicates an expected call of SetProfile
func (mr *MockAWSConfigProviderMockRecorder) SetProfile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfile", reflect.TypeOf((*MockAWSConfigProvider)(nil).SetProfile), arg0, arg1)
}
